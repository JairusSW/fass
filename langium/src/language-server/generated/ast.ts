/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, ReferenceInfo, TypeMetaData } from 'langium';

export type Declaration = StructDeclaration;

export const Declaration = 'Declaration';

export function isDeclaration(item: unknown): item is Declaration {
    return reflection.isInstance(item, Declaration);
}

export interface EnumDeclaration extends AstNode {
    readonly $type: 'EnumDeclaration';
    members: Array<EnumMemberStatement>
    name: IdentifierExpression
}

export const EnumDeclaration = 'EnumDeclaration';

export function isEnumDeclaration(item: unknown): item is EnumDeclaration {
    return reflection.isInstance(item, EnumDeclaration);
}

export interface EnumMemberStatement extends AstNode {
    readonly $container: EnumDeclaration;
    readonly $type: 'EnumMemberStatement';
    name: IdentifierExpression
    value?: IntegerLiteral
}

export const EnumMemberStatement = 'EnumMemberStatement';

export function isEnumMemberStatement(item: unknown): item is EnumMemberStatement {
    return reflection.isInstance(item, EnumMemberStatement);
}

export interface IdentifierExpression extends AstNode {
    readonly $container: EnumDeclaration | EnumMemberStatement | MemberStatement | StructDeclaration;
    readonly $type: 'IdentifierExpression';
    value: string
}

export const IdentifierExpression = 'IdentifierExpression';

export function isIdentifierExpression(item: unknown): item is IdentifierExpression {
    return reflection.isInstance(item, IdentifierExpression);
}

export interface IncludeDeclaration extends AstNode {
    readonly $type: 'IncludeDeclaration';
    predicate: string
}

export const IncludeDeclaration = 'IncludeDeclaration';

export function isIncludeDeclaration(item: unknown): item is IncludeDeclaration {
    return reflection.isInstance(item, IncludeDeclaration);
}

export interface IntegerLiteral extends AstNode {
    readonly $container: EnumMemberStatement;
    readonly $type: 'IntegerLiteral';
    value: number
}

export const IntegerLiteral = 'IntegerLiteral';

export function isIntegerLiteral(item: unknown): item is IntegerLiteral {
    return reflection.isInstance(item, IntegerLiteral);
}

export interface MemberStatement extends AstNode {
    readonly $container: StructDeclaration;
    readonly $type: 'MemberStatement';
    name: IdentifierExpression
    type: TypeExpression
}

export const MemberStatement = 'MemberStatement';

export function isMemberStatement(item: unknown): item is MemberStatement {
    return reflection.isInstance(item, MemberStatement);
}

export interface Program extends AstNode {
    readonly $type: 'Program';
    declarations: Array<Declaration>
}

export const Program = 'Program';

export function isProgram(item: unknown): item is Program {
    return reflection.isInstance(item, Program);
}

export interface StructDeclaration extends AstNode {
    readonly $container: Program;
    readonly $type: 'StructDeclaration';
    members: Array<MemberStatement>
    name: IdentifierExpression
}

export const StructDeclaration = 'StructDeclaration';

export function isStructDeclaration(item: unknown): item is StructDeclaration {
    return reflection.isInstance(item, StructDeclaration);
}

export interface TypeExpression extends AstNode {
    readonly $container: MemberStatement;
    readonly $type: 'TypeExpression';
    text: string
}

export const TypeExpression = 'TypeExpression';

export function isTypeExpression(item: unknown): item is TypeExpression {
    return reflection.isInstance(item, TypeExpression);
}

export interface FassAstType {
    Declaration: Declaration
    EnumDeclaration: EnumDeclaration
    EnumMemberStatement: EnumMemberStatement
    IdentifierExpression: IdentifierExpression
    IncludeDeclaration: IncludeDeclaration
    IntegerLiteral: IntegerLiteral
    MemberStatement: MemberStatement
    Program: Program
    StructDeclaration: StructDeclaration
    TypeExpression: TypeExpression
}

export class FassAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Declaration', 'EnumDeclaration', 'EnumMemberStatement', 'IdentifierExpression', 'IncludeDeclaration', 'IntegerLiteral', 'MemberStatement', 'Program', 'StructDeclaration', 'TypeExpression'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case StructDeclaration: {
                return this.isSubtype(Declaration, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'EnumDeclaration': {
                return {
                    name: 'EnumDeclaration',
                    mandatory: [
                        { name: 'members', type: 'array' }
                    ]
                };
            }
            case 'Program': {
                return {
                    name: 'Program',
                    mandatory: [
                        { name: 'declarations', type: 'array' }
                    ]
                };
            }
            case 'StructDeclaration': {
                return {
                    name: 'StructDeclaration',
                    mandatory: [
                        { name: 'members', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new FassAstReflection();
